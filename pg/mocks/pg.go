// Code generated by MockGen. DO NOT EDIT.
// Source: ./pg.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	pg "github.com/go-pg/pg"
	orm "github.com/go-pg/pg/orm"
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/topfreegames/extensions/pg/interfaces"
	reflect "reflect"
)

// MockQueryable is a mock of Queryable interface
type MockQueryable struct {
	ctrl     *gomock.Controller
	recorder *MockQueryableMockRecorder
}

// MockQueryableMockRecorder is the mock recorder for MockQueryable
type MockQueryableMockRecorder struct {
	mock *MockQueryable
}

// NewMockQueryable creates a new mock instance
func NewMockQueryable(ctrl *gomock.Controller) *MockQueryable {
	mock := &MockQueryable{ctrl: ctrl}
	mock.recorder = &MockQueryableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryable) EXPECT() *MockQueryableMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockQueryable) Exec(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockQueryableMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryable)(nil).Exec), varargs...)
}

// ExecOne mocks base method
func (m *MockQueryable) ExecOne(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecOne indicates an expected call of ExecOne
func (mr *MockQueryableMockRecorder) ExecOne(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecOne", reflect.TypeOf((*MockQueryable)(nil).ExecOne), varargs...)
}

// Query mocks base method
func (m *MockQueryable) Query(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockQueryableMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryable)(nil).Query), varargs...)
}

// Model mocks base method
func (m *MockQueryable) Model(model ...interface{}) *orm.Query {
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Model", varargs...)
	ret0, _ := ret[0].(*orm.Query)
	return ret0
}

// Model indicates an expected call of Model
func (mr *MockQueryableMockRecorder) Model(model ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockQueryable)(nil).Model), model...)
}

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockDB) Exec(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDBMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDB)(nil).Exec), varargs...)
}

// ExecOne mocks base method
func (m *MockDB) ExecOne(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecOne indicates an expected call of ExecOne
func (mr *MockDBMockRecorder) ExecOne(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecOne", reflect.TypeOf((*MockDB)(nil).ExecOne), varargs...)
}

// Query mocks base method
func (m *MockDB) Query(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDBMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDB)(nil).Query), varargs...)
}

// Model mocks base method
func (m *MockDB) Model(model ...interface{}) *orm.Query {
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Model", varargs...)
	ret0, _ := ret[0].(*orm.Query)
	return ret0
}

// Model indicates an expected call of Model
func (mr *MockDBMockRecorder) Model(model ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDB)(nil).Model), model...)
}

// Close mocks base method
func (m *MockDB) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Begin mocks base method
func (m *MockDB) Begin() (*pg.Tx, error) {
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*pg.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// WithContext mocks base method
func (m *MockDB) WithContext(ctx context.Context) *pg.DB {
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(*pg.DB)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (mr *MockDBMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockDB)(nil).WithContext), ctx)
}

// Context mocks base method
func (m *MockDB) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDBMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDB)(nil).Context))
}

// MockTx is a mock of Tx interface
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockTx) Exec(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockTxMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTx)(nil).Exec), varargs...)
}

// ExecOne mocks base method
func (m *MockTx) ExecOne(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecOne indicates an expected call of ExecOne
func (mr *MockTxMockRecorder) ExecOne(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecOne", reflect.TypeOf((*MockTx)(nil).ExecOne), varargs...)
}

// Query mocks base method
func (m *MockTx) Query(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockTxMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTx)(nil).Query), varargs...)
}

// Model mocks base method
func (m *MockTx) Model(model ...interface{}) *orm.Query {
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Model", varargs...)
	ret0, _ := ret[0].(*orm.Query)
	return ret0
}

// Model indicates an expected call of Model
func (mr *MockTxMockRecorder) Model(model ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockTx)(nil).Model), model...)
}

// Rollback mocks base method
func (m *MockTx) Rollback() error {
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockTxMockRecorder) Rollback() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
}

// Commit mocks base method
func (m *MockTx) Commit() error {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// MockTxWrapper is a mock of TxWrapper interface
type MockTxWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockTxWrapperMockRecorder
}

// MockTxWrapperMockRecorder is the mock recorder for MockTxWrapper
type MockTxWrapperMockRecorder struct {
	mock *MockTxWrapper
}

// NewMockTxWrapper creates a new mock instance
func NewMockTxWrapper(ctrl *gomock.Controller) *MockTxWrapper {
	mock := &MockTxWrapper{ctrl: ctrl}
	mock.recorder = &MockTxWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxWrapper) EXPECT() *MockTxWrapperMockRecorder {
	return m.recorder
}

// DbBegin mocks base method
func (m *MockTxWrapper) DbBegin(db interfaces.DB) (interfaces.Tx, error) {
	ret := m.ctrl.Call(m, "DbBegin", db)
	ret0, _ := ret[0].(interfaces.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbBegin indicates an expected call of DbBegin
func (mr *MockTxWrapperMockRecorder) DbBegin(db interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbBegin", reflect.TypeOf((*MockTxWrapper)(nil).DbBegin), db)
}
